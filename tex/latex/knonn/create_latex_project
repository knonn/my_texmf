#!/bin/bash

#	-------------------------------------------------------------------
#
#	Shell program to Create a LaTeX project from a template.
#
#	Copyright 2008,  <groolot@groolot.net>.
#
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License as
#	published by the Free Software Foundation; either version 2 of the
#	License, or (at your option) any later version.
#
#	This program is distributed in the hope that it will be useful, but
#	WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#	General Public License for more details.
#
#
#	-------------------------------------------------------------------
#   Changed version of program, the original author will not be considered
#   as responsible of any problems on it

#	-------------------------------------------------------------------
#	Constants
#	-------------------------------------------------------------------

	PROGNAME=$(basename $0)
	VERSION="0.0.2"
	TEMPLATE_DIR=~/texmf/tex/latex/knonn


#	-------------------------------------------------------------------
#	Functions
#	-------------------------------------------------------------------


function clean_up
{

#	-----------------------------------------------------------------------
#	Function to remove temporary files and other housekeeping
#		No arguments
#	-----------------------------------------------------------------------

	rm -f ${TEMP_FILE1}
}


function error_exit
{

#	-----------------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	-----------------------------------------------------------------------


	echo "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	clean_up
	exit 1
}


function graceful_exit
{

#	-----------------------------------------------------------------------
#	Function called for a graceful exit
#		No arguments
#	-----------------------------------------------------------------------

	clean_up
	exit
}


function signal_exit
{

#	-----------------------------------------------------------------------
#	Function to handle termination signals
#		Accepts 1 argument:
#			signal_spec
#	-----------------------------------------------------------------------

	case $1 in
		INT)	echo "$PROGNAME: Program aborted by user" >&2
			clean_up
			exit
			;;
		TERM)	echo "$PROGNAME: Program terminated" >&2
			clean_up
			exit
			;;
		*)	error_exit "$PROGNAME: Terminating on unknown signal"
			;;
	esac
}


function make_temp_files
{

#	-----------------------------------------------------------------------
#	Function to create temporary files
#		No arguments
#	-----------------------------------------------------------------------

	# Use user's local tmp directory if it exists

	if [ -d ~/tmp ]; then
		TEMP_DIR=~/tmp
	else
		TEMP_DIR=/tmp
	fi

	# Temp file for this script, using paranoid method of creation to
	# insure that file name is not predictable.  This is for security to
	# avoid "tmp race" attacks.  If more files are needed, create using
	# the same form.

	TEMP_FILE1=$(mktemp -q "${TEMP_DIR}/${PROGNAME}.$$.XXXXXX")
	if [ "$TEMP_FILE1" = "" ]; then
		error_exit "cannot create temp file!"
	fi
}


function usage
{

#	-----------------------------------------------------------------------
#	Function to display usage message (does not exit)
#		No arguments
#	-----------------------------------------------------------------------

	echo "Usage: ${PROGNAME} [ -h | --help ] [-e] output_directory"
}


function helptext
{

#	-----------------------------------------------------------------------
#	Function to display help message for program
#		No arguments
#	-----------------------------------------------------------------------

	local tab=$(echo -en "\t\t")

	cat <<- -EOF-

	${PROGNAME} ver. ${VERSION}
	This is a program to Create a LaTeX project from a template.

	$(usage)

	Options:

	-h, --help	Display this help message and exit.
	-e  output_directory Specify the output directory of the Exam project. Create it if not existing.

-EOF-
}

function create_exam_project
{
#	-----------------------------------------------------------------------
#	Function to create the project from the template
#		Accepts 1 argument:
#			output directory
#	-----------------------------------------------------------------------
    OUTPUT=$1
	if [ "${OUTPUT}" = "" ]; then
		error_exit "You must specify an output directory"
	fi
	if [ ! -d ${TEMPLATE_DIR} ]; then
	   error_exit "The specified template directory ${TEMPLATE_DIR} does not exist"
	fi

	if [ ! -d ${OUTPUT} ]; then
        mkdir -p ${OUTPUT} || error_exit "The output directory $1 can not be created"
    else
        if [ ! -w ${OUTPUT} ]; then
	       error_exit "The specified output directory $1 is not writable"
	   fi
    fi
#    for file_template in main licence copyright ; do
    for file_template in modele ; do
        if [ ! -f ${OUTPUT}/${file_template}.tex ]; then
            cp -Rfv ${TEMPLATE_DIR}/${file_template}.tex ${OUTPUT}/ || error_exit "The copy of the ${file_template} has not been reached"
        fi
    done
}


#	-------------------------------------------------------------------
#	Program starts here
#	-------------------------------------------------------------------

##### Initialization And Setup #####

# Set file creation mask so that all files are created with 600 permissions.

umask 022


# Trap TERM, HUP, and INT signals and properly exit

trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Create temporary file(s)

make_temp_files


##### Command Line Processing #####

if [ "$1" = "--help" ]; then
	helptext
	graceful_exit
fi

while getopts ":he:b:" opt; do
	case $opt in
	    e )	create_exam_project $OPTARG
		graceful_exit ;;
	    * )	usage
		clean_up
		exit 1
	esac
done

graceful_exit

